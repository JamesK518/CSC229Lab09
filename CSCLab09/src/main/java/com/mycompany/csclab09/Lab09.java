// ToDo 01:  Write an algorithm to solve the following problem
    /*
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over one hundred divisors?
    
    */
package com.mycompany.csclab09;

public class Lab09 {
   //Gets the triangle number  
   public void solve(int limit){
       long number = 1;
       long count = 1;
       while(true){
         count++;
         number += count;  
         //Outputs the value of the trianlge based on the number of divisors inputted
         if(getDivisors(number) > limit){
           System.out.println(number);
           break;
         }
      }
   }

    private int getDivisors(long number) {
        int divisors =2;
        //1 to the square root of a number holds exactly half the divisors
        long limit = (long) Math.sqrt(number * 1.0);
        for(int current = 2; current < limit; current++){
         //Adds 2 to divisors for each iteration of the loop  
         //2 since the amount was cut in half by sqrt
         if (number % current == 0){      
             divisors += 2;
         }        
        }         
        //If there are remaining divisors after the loop adds another divisor
        if (number % limit == 0){
            divisors++;
        }        
        return divisors;
      }   
 
   public static void main(String[] args){
       Lab09 prog = new Lab09();
       prog.solve(100);
 }
}